/*
Fibonacci numbers are generated by setting F0 = 0, F1 = 1, and then using the formula:

Fn = Fn-1 + Fn-2
Your task is to efficiently calculate the nth element in the Fibonacci sequence and then count the occurrence of each digit in the number. Return a list of integer pairs sorted in descending order.

10 ≤ n ≤ 100000

Examples
f(10) = 55  # returns [(2, 5)], as there are two occurances of digit 5

f(10000)    # returns:
  [(254, 3),
   (228, 2),
   (217, 6),
   (217, 0),
   (202, 5),
   (199, 1),
   (198, 7),
   (197, 8),
   (194, 4),
   (184, 9)]
If two integers have the same count, sort them in descending order.

Your algorithm must be efficient.

Thanks to kazk for assisting with the translation.
*/
const fibDigits = (n)=> {
    let str = fib(n)
    return countDigits(str)
}

const fib = (n) => {
    let n1 = BigInt(1)
    let n2 = BigInt(1)
    let temp
    while (n > 2){
        temp = n1 + n2
        n1 = n2
        n2 = temp
        n--
    }
    return temp.toString()
}

const countDigits = (str) => {
    let digits = {}
    for (let i = 0; i < str.length; i++){
        if (digits[str[i]]){
            digits[str[i]]++
        } else {
            digits[str[i]] = 1
        }
    }
    let arr = []
    for (let i in digits){
        arr.push([digits[i], Number(i)])
    }
    return arr.sort((a,b)=>{
        if (a[0] > b[0]){
            return -1
        }
        if (a[0] < b[0]){
            return 1
        }
        if (a[1] > b[1]){
            return -1
        }
        if (a[1] < b[1]){
            return 1
        }
        return 0
    })
}

console.log(fibDigits(10000))